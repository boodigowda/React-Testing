npm run coverage => to get report in browser
npm run test skills.test.tsx  => to run particular file
What to test?
1. Test component renders
2. Test component renders with props
3. Test component renders in differnt states
4. Test component react to events

What not to test?
1. Implementation details
2. Third party code
3. Code that is not important user point of view


RTL Queries
Queries are the methods that Testing Library provides to find elements on the page

To find a single element on the page, we have
1. getBy..
2. queryBy..
3. findBy..

To find multiple elements on the page, we have
1. getAllBy..
2. queryAllBy.. 
3. findAllBy..

The suffix(..) can be one of Role, LabelText, PlaceHolderText, Text, DisplayValue, AltText, Title and finally Testid

1. getBy... queries>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
getBy.. class of queries return the matching node for a query, and throw a descriptive error if no elements match or if more than one match is found
The suffix can be one of Role, LabelText, PlaceHolderText, Text, DisplayValue, AltText, Title and finally Testld.
1. getByRole    ===>            first argument will be role second will be name, heading expect
                                Inner text of the Element.
                                const bioElement = screen.getByRole("textbox", {
                                                        name: "Bio" //Inner text of the Element
                                                    });
                                expect(bioElement).toBeInTheDocument();

2. getByLabelText==>            getByLabelText will search for the label that matches the given text, 
                                then find the element associated with that label

                                test('component renders correctly', () => {
                                    render(<Application />);
                                    const textElement = screen.getByLabelText("Name", {
                                        selector: "input" //input will be the tag and "Name" will be innner text of label
                                    });
                                    expect(textElement).toBeInTheDocument();
                                })

3. getByPlaceholderText==>      getByPlaceholderText will search for all elements with a placeholder attribute and
                                find one that matches the given text

4. getByText===>                getByText will search for all elements that have a text node with textContent matching the given text
                                Typically, you'd use this to find paragraph, div or span elements

5. getByDisplayValue===>        getByDisplayValue returns the input, textarea, or select element that has the matching display value.

6. getByAltText===>             getByAltText will return the element that has the given alt text
                                This method only supports elements which accept an alt attribute like <img>, <input>, <area> or custom HTML elements

7. getByTestId====>             getByTestId returns the element that has the matching data-testid attribute.


Priority Order for Queries
"Your test should resemble how users interact with your code (component, page, etc.) as much as possible"
1. getByRole
2. getByLabelText
3. getByPlaceholderText
4. getByText
5. getByDisplayValue
6. getByAltText
7. getByTitle
8. getByTestId

RTL getBy and getAllBy Queries
getByRole                       getAllByRole
getByLabelText                  getAllByLabelText
getByPlaceholderText            getAllByPlaceholderText
getByText                       getAllByText
getByDisplayValue               getAllByDisplayValue
getByAltText                    getAllByAltText
getByTitle                      getAllBy Title
getByTestid                     getAllByTestid